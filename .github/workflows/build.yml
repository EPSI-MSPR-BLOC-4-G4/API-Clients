name: Build

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    env: 
      DATABASE_URL: postgresql://postgres:123@localhost:5434/epsi_customers?schema=public
      PORT: 7000
      KAFKA_SERVER: "82.66.231.166:39092"
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: epsi_customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install --include=dev

      - name: Setup PostgreSQL
        run: |
          # Wait for PostgreSQL to start
          until nc -z localhost 5434; do
            echo "Waiting for PostgreSQL to start..."
            sleep 1
          done

          # Generate and apply migrations
          npx prisma generate
          npx prisma migrate dev --name init

      - name: Run tests
        run: npm test

      - name: Sonar Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Start API Server
        run: npm start &
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          KAFKA_SERVER: ${{ env.KAFKA_SERVER }}
          PORT: ${{ env.PORT }}
          
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:${{ env.PORT }}/api/customers/ http://localhost:${{ env.PORT }}/api/customers/1 http://localhost:${{ env.PORT }}/api/customers/1/orders http://localhost:${{ env.PORT }}/api/customers/1/orders/1 http://localhost:${{ env.PORT }}/api/customers/1/orders/1/products'
          cmd_options: '-a'

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/api-clients:latest
          
      - name: Call Portainer Webhook
        run: curl -X POST ${{ secrets.PORTAINER_WEBHOOK_URL }}
